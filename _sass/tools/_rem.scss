// ----------------------------------------------------------------------
// REM font size with PX fallback
// ----------------------------------------------------------------------

// example p { @include font-size(14px); }

@mixin font-size($font-size, $important: false) {

  @if (type-of($font-size) == number) {
    @if (unit($font-size) != "px") {
      @error "`#{$font-size}` needs to be a pixel value.";
    }
  } @else {
    @error "`#{$font-size}` needs to be a number.";
  }

  @if ($important == true) {
    $important: !important;
  } @elseif ($important == false) {
    $important: null;
  } @else {
    @error "`#{$important}` needs to be `true` or `false`."
  }

  // We provide a `px` fallback for old IEs not supporting `rem` values.
  font-size: $font-size $important;
  font-size: ($font-size / 16px) * 1rem $important;

}



///* ========================================================================
//   #REM
//   ======================================================================== */

// Convert any px value into its rem equivalent.

@function inuit-rem($value) {

  @if (type-of($value) == number) {

    @if (unit($value) != "px") {
      @error "`#{$value}` needs to be a pixel value.";
    }

  } @else {
    @error "`#{$value}` needs to be a number.";
  }

  @return $value / $global-font-size * 1rem;

}


// Mixin to create a declaration whose value is a rem unit. Also provide pixel
// fallback.
//
// .simple-usage {
//   @include inuit-rem(padding, 10px);
// }

@mixin inuit-rem($property, $value) {

  @if (type-of($value) == number) {

    @if (unit($value) != "px") {
      @error "`#{$value}` needs to be a pixel value.";
    }

  } @else {
    @error "`#{$value}` needs to be a number.";
  }

  // We provide a `px` fallback for old IEs not supporting `rem` values.
  #{$property}: $value;

  #{$property}: inuit-rem($value);

}